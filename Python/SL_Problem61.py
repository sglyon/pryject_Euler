"""
Created July 8, 2013

Author: Spencer Lyon

Project Euler Problem 61:

Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal
numbers are all figurate (polygonal) numbers and are generated by the
following formulae:


Triangle        P_{3,n} = n(n+1)/2       1, 3, 6, 10, 15, ...
Square          P_{4,n} = n^2            1, 4, 9, 16, 25, ...
Pentagonal      P_{5,n} = n(3n1)/2       1, 5, 12, 22, 35, ...
Hexagonal       P_{6,n} = n(2n1)         1, 6, 15, 28, 45, ...
Heptagonal      P_{7,n} = n(5n3)/2       1, 7, 18, 34, 55, ...
Octagonal       P_{8,n} = n(3n2)         1, 8, 21, 40, 65, ...

The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three
interesting properties.

1. The set is cyclic, in that the last two digits of each number is the
   first two digits of the next number (including the last number with
   the first).

2 Each polygonal type: triangle (P3,127=8128), square (P4,91=8281), and
  pentagonal (P5,44=2882), is represented by a different number in the
  set.

3. This is the only set of 4-digit numbers with this property.

Find the sum of the only ordered set of six cyclic 4-digit numbers for
which each polygonal type: triangle, square, pentagonal, hexagonal,
heptagonal, and octagonal, is represented by a different number in the
set.

"""
from __future__ import division
from time import time
from tools.polynums import *

start_time = time()


def poly_nums(n):
    funcs = [triangle, square, pentagonal, hexagonal, heptagonal, octagonal]
    return [i(n, True) for i in funcs]


def gen_chains(p1):
    k1, v1 = p1
    kinds = [k1]
    vals = [v1]
    chains = []
    for k2, v2 in table[p1]:
        if k2 not in kinds and v2 not in vals:
            chains.append(gen_chains((k2, v2)))

    return gen_chains

start = 19
stop = 141

poly = []

for n in range(start, stop + 1):
    for kind, val in poly_nums(n):
        if len(str(val)) == 4:
            poly.append((kind, val))

table = {}

for k1, v1 in poly:
    table[(k1, v1)] = []
    for k2, v2 in poly:
        if k1 != k2 and str(v1)[2:] == str(v2)[:2]:
            table[(k1, v1)] += [(k2, v2)]


def find_chain(kinds, vals):
    if len(kinds) == 6 and str(vals[0])[:2] == str(vals[-1])[2:]:
        global ans
        ans = sum(vals)
    else:
        # NOTE: dict.get looks up key, but if it isn't found returns a default
        #       value, in this case an empty list [].
        for t, n in table.get((kinds[-1], vals[-1]), []):
            if t not in kinds:
                find_chain(kinds+[t], vals+[n])

ans = None
for t, d, in table:
    find_chain([t], [d])
    if ans is not None:
        break

print("The answer is: %s" % str(ans))

running_time = time()
elapsed_time = running_time - start_time
print('Total Execution time is %.3e seconds' % elapsed_time)
